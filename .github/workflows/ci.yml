name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Lint and type check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Lint backend
        run: |
          cd backend
          npm run lint
          
      - name: Type check backend
        run: |
          cd backend
          npm run build
          
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
          
      - name: Type check frontend
        run: |
          cd frontend
          npm run build

  # Backend tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd backend
          npm install
          
      - name: Setup environment
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "NODE_ENV=test" >> .env
          
      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate
          
      - name: Run database migrations
        run: |
          cd backend
          npm run prisma:migrate
          
      - name: Run tests
        run: |
          cd backend
          npm test
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install
          
      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Setup backend environment
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/e2e_test_db" > .env
          echo "JWT_SECRET=e2e-test-secret-key" >> .env
          echo "NODE_ENV=test" >> .env
          
      - name: Setup database
        run: |
          cd backend
          npm run prisma:generate
          npm run prisma:migrate
          npm run prisma:seed
          
      - name: Start backend
        run: |
          cd backend
          npm run build
          npm start &
          sleep 10
          
      - name: Start frontend
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 10
          
      - name: Run E2E tests
        run: |
          npm run test:e2e

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build and deploy
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, e2e, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Build backend
        run: |
          cd backend
          npm run build
          
      - name: Build frontend
        run: |
          cd frontend
          npm run build
          
      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist 